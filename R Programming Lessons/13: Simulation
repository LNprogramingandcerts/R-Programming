13: Simulation

Selection: 13

  |                                                                                                                                                          |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of tools for simulating random numbers.

...

  |=====                                                                                                                                                     |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with respect to random number generation.
| Even if you have no prior experience with these concepts, you should be able to complete the lesson and understand the main ideas.

...

  |=========                                                                                                                                                 |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample

| You are really on a roll!

  |==============                                                                                                                                            |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> 
> sample(1:6, 4, replace = TRUE)
[1] 2 6 4 2

| Your dedication is inspiring!

  |===================                                                                                                                                       |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 2 1 4 4

| Your dedication is inspiring!

  |=======================                                                                                                                                   |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement simply means that each
| number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want here, since what you roll on one die
| shouldn't affect what you roll on any of the others.

...

  |============================                                                                                                                              |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.

> sample(1:20, 10)
 [1] 16  7  2 13 19  6 12  1  9 17

| Great job!

  |=================================                                                                                                                         |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |=====================================                                                                                                                     |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| That's the answer I was looking for.

  |==========================================                                                                                                                |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try sample(LETTERS) to permute all 26 letters of the
| English alphabet.

> sample(LETTERS)
 [1] "X" "A" "J" "L" "S" "V" "E" "C" "M" "N" "T" "K" "R" "Y" "G" "Q" "H" "O" "I" "F" "W" "B" "P" "Z" "U" "D"

| You're the best!

  |===============================================                                                                                                           |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R takes a sample equal
| in size to the vector from which you are sampling.

...

  |===================================================                                                                                                       |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of
| landing 'heads'.

...

  |========================================================                                                                                                  |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with replacement. Since the
| coin is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a
| new variable called flips.

> flips<- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)

| Great job!

  |=============================================================                                                                                             |  39%
| View the contents of the flips variable.

> flips
  [1] 1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1 1 1 0 1 0 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 1 1 1 1
 [80] 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 0

| That's the answer I was looking for.

  |=================================================================                                                                                         |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual
| number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 71

| You are quite good my friend!

  |======================================================================                                                                                    |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a binomial random
| variable. Pull up the documentation for rbinom() using ?rbinom.

> rbinom
function (n, size, prob) 
.Call(C_rbinom, n, size, prob)
<bytecode: 0x000000001b61fb88>
<environment: namespace:stats>

| Almost! Try again. Or, type info() for more options.

| Type ?rbinom to pull up the help file for rbinom().

> ?rbinom

| You got it right!

  |===========================================================================                                                                               |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and q*** (for "quantile").
| We are most interested in the r*** functions in this lesson, but I encourage you to explore the others on your own.

...

  |===============================================================================                                                                           |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a
| single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify
| the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.

> 
> rbinom(1, size= 100, prob= 0.7)
[1] 66

| You got it!

  |====================================================================================                                                                      |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success probability of 0.7. Give it a try, assigning
| the result to a new variable called flips2.

> fliqs2<-rbinom(100, size= 1, prob= 0.7)

| One more time. You can do it! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2<-rbinom(100, size= 1, prob= 0.7)

| Excellent job!

  |=========================================================================================                                                                 |  58%
| View the contents of flips2.

> flips2
  [1] 0 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 0 0 1
 [80] 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 1 1

| You are quite good my friend!

  |=============================================================================================                                                             |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sums(flips2)
Error in sums(flips2) : could not find function "sums"
> sum(flips2)
[1] 74

| Perseverance, that's the answer.

  |==================================================================================================                                                        |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| That's correct!

  |=======================================================================================================                                                   |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the documentation, the default values for the
| 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a
| try.

> rnorm(10)
 [1]  0.7955238 -0.2880866 -0.3115746 -0.7525844  0.2451206 -2.7281048  0.4110519  0.1785361 -0.3260032 -1.6038191

| You are doing so well!

  |===========================================================================================================                                               |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10, mean = 100, sd= 25)
 [1]  99.38890  65.69442  23.97257 143.12314  93.05179 105.13252 128.99203  96.89931  53.40708  77.19374

| Keep working like that and you'll get there!

  |================================================================================================================                                          |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson distribution with mean 10? Let's start
| with one group of 5 numbers, then I'll show you how to repeat the operation 100 times in a convenient and compact way.

...rnorm(5, mean = 10, sd= 5)

  |=====================================================================================================================                                     |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need help.

> ?rpois()
> rpois(5, 10)
[1]  8  5  9  9 13

| Excellent work!

  |=========================================================================================================================                                 |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called my_pois.

> my_pois<-replicate(100, rpois(5,10))

| You are quite good my friend!

  |==============================================================================================================================                            |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]   11   11   11    9    8   15    8   13   20     9     2     7    11     9    12     6    11     9     9     8    15    14    14    14    10    16     8    13
[2,]   10    8   11    9    9    9    9   11   11    15     9    18    12     8    11     9    12    10     7    14     4     8    10    11     7    10    12    11
[3,]    7   11    7    9    9   11   12    8   14     9    15    14    12     8     7    11     9    10    10     9     7     7     8     6     7     8     3    16
[4,]   10   10    6    9   10    8   14    6   15    16     6    10     9     9    11    13     8    14    10     8     9     5     7     8     7    10     8    12
[5,]    9   18    9    8    8    9    7   13   10     7    13    11     9    12    11     8    10    10    11    11    14    10    10     5    13    10     8    12
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54]
[1,]    13     9     7    15    14     9    13    14    14    11    14    11    11     9    12     7    14    10     8     6     7    11     8    11     8     5
[2,]     7     8    10    10     4     4    10     6     8    16    10    16     6    13     8     8     9     9     8    15    14    12    16    14    11    11
[3,]     3    12    13     8    10     9     9    10     7     8     7     7     9     5    13    11    11    12    12    12    11     7    12    12    10    11
[4,]    12     9    15    11    14     6    15    10    10     6     9     7    12    11     6     7     9     7    10     8     8     7     6    11    10    11
[5,]     6     8    11     7    12    11     8     9     9     6    16     7     5    15    16     9     4    15     7    15     6     5     9    12     7     7
     [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80]
[1,]    13     8     9     7    10    13    16    12    10    11     6     7    12    11     9     9    12    12    13     7     9     8    13    15     8    11
[2,]    15    12     9     9    14     5     9    11    11     8    13     9     9     8     8    13     7    12    11     9     8    11     9    10     9     9
[3,]     7    16    11     9    12    17     4    13     8    11     7    10     3     8    15    17    12    19    16    13    11     9    10    11    13     9
[4,]     5    14    10    10    11    17    10    10     6     9     9     9     8    16    11    12     9    11    14     9    15    10     3     8     6     5
[5,]     6    14     6    13    14     7    10     6     9     6     7     6     6     9    14     8    10    11    11     7    10    10     5     9    12     7
     [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     6    13     9     8    15    17     6    19     9     7     9     6    12    13    12     8    11    11    13     14
[2,]     8     7     5    12    12     4     7    10    10    16     9     9    14    12    10     7    16     9     2      9
[3,]     9    11     7     7     6     7    11     6     7    12     9    12     8    15    10     9     8    11    12     10
[4,]     8    11     6    11    10    14     6     9     6    11    21    10    14     9    14    10     6     7    17     12
[5,]     9    14    14     9     8    12    11    13    15     8     6     7    15    15     9     8    10     7    14     11

| You are doing so well!

  |===================================================================================================================================                       |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with mean 10. Now we can find the mean of each
| column in my_pois using the colMeans() function. Store the result in a variable called cm.

> colMeans(my_pois)
  [1]  9.4 11.6  8.8  8.8  8.8 10.4 10.0 10.2 14.0 11.2  9.0 12.0 10.6  9.2 10.4  9.4 10.0 10.6  9.4 10.0  9.8  8.8  9.8  8.8  8.8 10.8  7.8 12.8  8.2  9.2 11.2
 [32] 10.2 10.8  7.8 11.0  9.8  9.6  9.4 11.2  9.6  8.6 10.6 11.0  8.4  9.4 10.6  9.0 11.2  9.2  8.4 10.2 12.0  9.2  9.0  9.2 12.8  9.0  9.6 12.2 11.8  9.8 10.4
 [63]  8.8  9.0  8.4  8.2  7.6 10.4 11.4 11.8 10.0 13.0 13.0  9.0 10.6  9.6  8.0 10.6  9.6  8.2  8.0 11.2  8.2  9.4 10.2 10.8  8.2 11.4  9.4 10.8 10.8  8.8 12.6
 [94] 12.8 11.0  8.4 10.2  9.0 11.6 11.2

| Not quite right, but keep trying. Or, type info() for more options.

| Use cm <- colMeans(my_pois) to create a vector of column means, storing the result in cm.

> cm<- colMeans(my_pois)

| Keep working like that and you'll get there!

  |=======================================================================================================================================                   |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| That's a job well done!

  |============================================================================================================================================              |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a lesson for another day!

...

  |=================================================================================================================================================         |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the
| pattern.

...

  |=====================================================================================================================================================     |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to explore these and other functions further
| on your own.

...
