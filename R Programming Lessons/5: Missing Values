 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                    5: Missing Values          
 6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                      9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data           13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 5

  |                                                                                                                                                          |   0%

| Missing values play an important role in statistics and data analysis. Often, missing values must not be ignored, but rather they should be carefully studied to
| see if there's an underlying pattern or cause for their missingness.

...

  |========                                                                                                                                                  |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in the statistical sense). In this lesson, we'll explore missing values further.

...

  |===============                                                                                                                                           |  10%
| Any operation involving NA generally yields NA as the result. To illustrate, let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x<- c(44,NA,5,NA)

| All that practice is paying off!

  |=======================                                                                                                                                   |  15%
| Now, let's multiply x by 3.

> x*3
[1] 132  NA  15  NA

| Great job!

  |===============================                                                                                                                           |  20%
| Notice that the elements of the resulting vector that correspond with the NA values in x are also NA.

...

  |======================================                                                                                                                    |  25%
| To make things a little more interesting, lets create a vector containing 1000 draws from a standard normal distribution with y <- rnorm(1000).

> y<-rnorm(1000)

| That's correct!

  |==============================================                                                                                                            |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA,1000)

| You got it right!

  |======================================================                                                                                                    |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we don't know how many NAs we'll wind up with or what positions
| they'll occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data<- sample(c(y,z),100)

| You nailed it! Good job!

  |==============================================================                                                                                            |  40%
| Let's first ask the question of where our NAs are located in our data. The is.na() function tells us whether each element of a vector is NA. Call is.na() on
| my_data and assign the result to my_na.

> my_na<_is.na(my_data)
Error: unexpected input in "my_na<_"
> my_na<-is.na(my_data)

| Perseverance, that's the answer.

  |=====================================================================                                                                                     |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE
 [27] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE
 [53]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
 [79] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE

| You got it!

  |=============================================================================                                                                             |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA. Likewise, everywhere you see a FALSE, you know the corresponding element of
| my_data is one of our random draws from the standard normal distribution.

...

  |=====================================================================================                                                                     |  55%
| In our previous discussion of logical operators, we introduced the `==` operator as a method of testing for equality between two objects. So, you might think the
| expression my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [54] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| Keep up the great work!

  |============================================================================================                                                              |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but just a placeholder for a quantity that is not available. Therefore the logical
| expression is incomplete and R has no choice but to return a vector of the same length as my_data that contains all NAs.

...

  |====================================================================================================                                                      |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious when using logical expressions anytime NAs might creep in, since a single NA value
| can derail the entire thing.

...

  |============================================================================================================                                              |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for every NA and FALSE for every numeric value, we can compute the total number
| of NAs in our data.

...

  |====================================================================================================================                                      |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as the number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of
| TRUEs and FALSEs, we get the total number of TRUEs.

...

  |===========================================================================================================================                               |  80%
| Let's give that a try here. Call the sum() function on my_na to count the total number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't
| assign the result to a new variable.

> sum(my_na)
[1] 49

| That's a job well done!

  |===================================================================================================================================                       |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA  1.05174616 -0.76701860 -0.90637666          NA          NA -0.09001648          NA  0.97938208 -0.07686240          NA  1.69357546 -1.53060007
 [14]  1.60140374  0.55535581          NA          NA          NA          NA -1.17538070          NA -0.02175895 -0.10755139  0.15305054  0.29039154          NA
 [27] -1.57474258  2.39360166 -0.29714139          NA          NA  1.17985804 -0.56808659 -0.32600325 -0.51553056          NA          NA          NA -1.25953619
 [40] -1.28013823  0.31939019          NA          NA          NA  0.25507390 -0.21200322 -1.35399112          NA -1.81053597          NA          NA -0.97941976
 [53]          NA          NA  0.49314285          NA          NA          NA          NA  0.69119490          NA -1.60798220          NA          NA          NA
 [66]          NA  0.58182350          NA          NA -0.14982561 -0.24760314          NA          NA          NA -0.80089305  0.13615082          NA          NA
 [79] -0.61193596 -0.80441208          NA -2.18080134  0.77498731          NA -0.40524225          NA  0.17204816 -1.44359921 -0.54734392 -0.09819701          NA
 [92]          NA -1.74222637          NA          NA -1.28410804  2.88706704          NA          NA  0.33110203

| Keep up the great work!

  |===========================================================================================================================================               |  90%
| Now that we've got NAs down pat, let's look at a second type of missing value -- NaN, which stands for 'not a number'. To generate NaN, try dividing (using a
| forward slash) 0 by 0 now.

> 0/0
[1] NaN

| Perseverance, that's the answer.

  |==================================================================================================================================================        |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you subtract Inf from Inf?

> Inf-Inf
[1] NaN

| You nailed it! Good job!

  |==========================================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes
