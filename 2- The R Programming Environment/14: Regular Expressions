
Selection: 14
  |                                                                                                                                                          |   0%

| Now that we’ve covered the basics of string manipulation in R, let’s discuss the more advanced topic of regular expressions. A regular expression is a string
| that defines a pattern that could be contained within another string. A regular expression can be used for searching for a string, searching within a string, or
| replacing one part of a string with another string. In this lesson I might refer to a regular expression as a regex, just know that they’re the same thing.

...

  |===                                                                                                                                                       |   2%
| Regular expressions use characters to define patterns of other characters. Although that approach may seem problematic at first, we’ll discuss meta-characters
| (characters that describe other characters) and how you can use them to create powerful regular expressions.

...

  |======                                                                                                                                                    |   4%
| One of the most basic functions in R that uses regular expressions is the grepl() function, which takes two arguments - a regular expression and a string to be
| searched. If the string contains the specified regular expression then grepl() will return TRUE, otherwise it will return FALSE.

...

  |=========                                                                                                                                                 |   6%
| Let’s contruct an example using grepl() with a string and a regex. First assign the regex "a" to a variable called regular_expression.

> regular_expression <- regex("a")
Error in regex("a") : could not find function "regex"
> regular_expression <- regexec("a")
Error in regexec("a") : argument "text" is missing, with no default
> regular_expression <- regexec("a")
Error in regexec("a") : argument "text" is missing, with no default
> 
> regular_expression <- "a"

| You're the best!

  |============                                                                                                                                              |   8%
| Next assign the string "Maryland" to a variable called string_to_search.

> string_to_search <- "Maryland"

| That's a job well done!

  |===============                                                                                                                                           |  10%
| Now use grepl() to see whether regular_expression is present in string_to_search.

> grep1(regular_expression, string_to_search)
Error in grep1(regular_expression, string_to_search) : 
  could not find function "grep1"
> ?grep1
No documentation for ‘grep1’ in specified packages and libraries:
you could try ‘??grep1’
> ?grep
> grepl(regular_expression, string_to_search)
[1] TRUE

| All that hard work is paying off!

  |==================                                                                                                                                        |  12%
| In the previous example we specify the regular expression "a" and store it in a variable called regular_expression. Remember that regular expressions are just
| strings! We also store the string "Maryland" in a variable called string_to_search. The regular expression "a" represents a single occurrence of the character
| "a". Since "a" is contained within "Maryland", grepl() returns the value TRUE.

...

  |=====================                                                                                                                                     |  14%
| Which of the following expressions would return the value FALSE?

1: grepl("a", "Maryland")
2: grepl("u", "Maryland")
3: grepl("M", "Maryland")

Selection: 2

| You are amazing!

  |========================                                                                                                                                  |  16%
| Let's try a few more examples. Before you enter each comming into the R console, try to guess what the result will be (either TRUE or FALSE). Type grepl("ryla",
| "Maryland") into the R console.

> grepl("ryla", "Maryland")
[1] TRUE

| You are amazing!

  |===========================                                                                                                                               |  18%
| Now try typing grepl("Marly", "Maryland") into the R console.

> grepl("Marly", "Maryland")
[1] FALSE

| Great job!

  |==============================                                                                                                                            |  20%
| Since "ryla" is a sub-string of "Maryland", grepl() returns TRUE, however when a regular expression like "Marly" is searched grepl() returns FALSE because it is
| not a sub-string of "Maryland".

...

  |=================================                                                                                                                         |  22%
| There’s a dataset that comes with R called state.name which is a vector of strings, one for each state in the United States of America. We’re going to use this
| vector in several of the following examples. Let's take a look at this vector by entering head(state.name)

> 
> head(state.name)
[1] "Alabama"    "Alaska"     "Arizona"    "Arkansas"   "California" "Colorado"  

| You got it right!

  |====================================                                                                                                                      |  24%
| Let’s build a regular expression for identifying several strings in this vector, specifically a regular expression that will match names of states that both
| start and end with a vowel. The state name could start and end with any vowel, so we won’t be able to match exact sub-strings like in the previous examples.
| Thankfully we can use metacharacters to look for vowels and other parts of strings.

...

  |=======================================                                                                                                                   |  25%
| I'm opening up a table of metacharacters that I'll be refering to for the rest of the lesson.

...

  |==========================================                                                                                                                |  27%
| The first metacharacter that we’ll discuss is ".". The metacharacter that only consists of a period represents any character other than a new line (we’ll discuss
| new lines soon).

...

  |=============================================                                                                                                             |  29%
| Let's try using this metacharacter. Enter grepl(".", "Maryland") into the R console to see if there is one instance of any character present.

> grepl(".", "Maryland")
[1] TRUE

| Your dedication is inspiring!

  |================================================                                                                                                          |  31%
| Let's try one more time using this metacharacter. Enter grepl(".", "") into the R console.

> grep1(".","")
Error in grep1(".", "") : could not find function "grep1"
> grepl(".","")
[1] FALSE

| Keep working like that and you'll get there!

  |===================================================                                                                                                       |  33%
| There aren't any characters in an empty string, there this expression is evaluated to FALSE.

...

  |======================================================                                                                                                    |  35%
| As you can see the period metacharacter is very liberal. This metacharacter is most userful when you don’t care about a set of characters in a regular
| expression. Enter grepl("a.b", c("aaa", "aab", "abb", "acadb")) into the R console to see what happens.

> grepl("a.b", c("aaa","aab","abb","acadb"))
[1] FALSE  TRUE  TRUE  TRUE

| You got it!

  |=========================================================                                                                                                 |  37%
| In the previos case grepl() returns TRUE for all strings that contain an "a" followed by any other character followed by a "b".

...

  |============================================================                                                                                              |  39%
| You can specify a regular expression that contains a certain number of characters or metacharacters using the enumeration metacharacters.

...

  |===============================================================                                                                                           |  41%
| The "+" metacharacter indicates that one or more of the preceding expression should be present and "*" indicates that zero or more of the preceding expression is
| present. Use grepl() to see if the string "Maryland" contains one for more of "a"

> 
> grepl("a"+, "Maryland")
Error: unexpected ',' in "grepl("a"+,"
> grepl("a", "Maryland")
[1] TRUE

| Keep trying! Or, type info() for more options.

| Just type grepl("a+", "Maryland")

> grepl("a+", "Maryland")
[1] TRUE

| You are really on a roll!

  |==================================================================                                                                                        |  43%
| Now use grepl() to see if the string "Maryland" contains zero for more of "x"

> grepl("x*", "Maryland")
[1] TRUE

| All that hard work is paying off!

  |=====================================================================                                                                                     |  45%
| You can also specify exact numbers of expressions using curly brackets {}. For example "a{5}" specifies "a exactly five times," "a{2,5}" specifies "a between 2
| and 5 times," and "a{2,}" specifies "a at least 2 times."

...

  |========================================================================                                                                                  |  47%
| Use grepl() to see if the string "Mississippi" contains exactly two adjacent "s" (using curly brackets).

> grepl("s{2}", Mississippi)
Error in grepl("s{2}", Mississippi) : object 'Mississippi' not found
> grepl("s{2}", "Mississippi"")
+ 
+ grepl("s{2}", "Mississippi"")
Error: unexpected string constant in:
"
grepl(""
> grepl("s{2}", "Mississippi"")
+ 

> grepl("s{2}", "Mississippi")
[1] TRUE

| That's a job well done!

  |===========================================================================                                                                               |  49%
| Use grepl() to see if the string "Mississippi" contains two or three adjacent "i" (using curly brackets).

> grepl("i{3,}", "Mississippi")
[1] FALSE

| Keep trying! Or, type info() for more options.

| Just type grepl("i{2,3}", "Mississippi")

> grepl("i{2,3}", "Mississippi")
[1] FALSE

| You nailed it! Good job!

  |===============================================================================                                                                           |  51%
| In addition to curly brackets you can use parentheses "()" to create a capturing group. A capturing group allows you to use quantifiers on other regular
| expressions. Let's use a capturing group to see if the string "Mississippi" contains the substring "iss" twice.

...grepl("iss(2)", "Mississippi")

  |==================================================================================                                                                        |  53%
| Type grepl("(iss){2}", "Mississippi") into the R console to see if the substring "iss" exists twice adjacently in the string "Mississippi"

> grepl("(iss){2}", "Mississippi")
[1] TRUE

| Keep up the great work!

  |=====================================================================================                                                                     |  55%
| Notice that the regular expression in the previous example is essentially the same as "ississ"

...

  |========================================================================================                                                                  |  57%
| Which of the following expressions will evaluate to TRUE? This is tough! Take a minute to think about it.

1: grepl("(i.{3}){3}", "Mississippi")
2: grepl("(i.{2}){3}", "Mississippi")
3: grepl("(i.{2}){4}", "Mississippi")

Selection: 2

| Your dedication is inspiring!

  |===========================================================================================                                                               |  59%
| You can specify sets of characters with regular expressions, some of which come built in, but you can build your own character sets too. It will be a good idea
| to reference the metachacter table I brought up before.

...

  |==============================================================================================                                                            |  61%
| First we'll discuss the built in character sets words ("\\w"), digits ("\\d"), and whitespace characters ("\\s"). Words specify any letter, digit, or a
| underscore, digits specify the digits 0 through 9, and whitespace specifies line breaks, tabs, or spaces. Each of these character sets have their own compliments
| - not words ("\\W"), not digits ("\\D"), and not whitespace characters ("\\S"). Each specifies all of the characters not included in their corresponding
| character sets.

...

  |=================================================================================================                                                         |  63%
| Let's try out a few of these character sets. Type grepl("\\d", "0123456789") into the R console to see if the string "0123456789" contains a digit.

> 
> grepl("\\d", "0123456789")
[1] TRUE

| You're the best!

  |====================================================================================================                                                      |  65%
| Now let's try using the compliment of the "\\d" set. Enter grepl("\\D", "0123456789") into the R console to see if there are any non-digits in the string
| "0123456789"

> grepl("\\D", "0123456789")
[1] FALSE

| Nice work!

  |=======================================================================================================                                                   |  67%
| Which of the following evaluates to FALSE?

1: grepl("\\w", "abcdefghijklmnopqrstuvwxyz0123456789")
2: grepl("\\d", "abcdefghijklmnopqrstuvwxyz0123456789")
3: grepl("\\s", "abcdefghijklmnopqrstuvwxyz0123456789")

Selection: 3

| All that practice is paying off!

  |==========================================================================================================                                                |  69%
| You can also specify specific character sets using straight brackets []. For example a character set of just the vowels would look like - "[aeiou]". You can find
| the complement to a specific character by putting a carrot ^ after the first bracket. For example "[^aeiou]" matches all characters except the lowercase vowels.
| You can also specify ranges of characters using a hyphen - inside of the brackets. For example "[a-m]" matches all of the lowercase characters between a and m,
| while "[5-8]" matches any digit between 5 and 8 inclusive.

...

  |=============================================================================================================                                             |  71%
| Time to take some of the training wheels off! Use grepl() to see if there is a vowel in the string "rhythms"

> grepl([aeiou], rhythms)
Error: unexpected '[' in "grepl(["
> grepl("[aeiou]", "rhythms")
[1] FALSE

| You are really on a roll!

  |================================================================================================================                                          |  73%
| Which of the following expressions evaluates to TRUE?

1: grepl("[a-m]", "ABC")
2: grepl("[aeiou]", "rhythms")
3: grepl("[a-mA-M]", "ABC")

Selection: 3

| You are amazing!

  |===================================================================================================================                                       |  75%
| You might be wondering how you can use regular expressions to match a particular punctuation mark since many punctuation marks are used as metacharacters!
| Putting two backslashes before a punctuation mark that is also a metacharacter indicates that you are looking for the symbol and not the metacharacter meaning.
| For example "\\." indicates you are trying to match a period in a string.

...

  |======================================================================================================================                                    |  76%
| Use grepl() to see whether or not a peroid exists in the string "http://www.jhsph.edu/"

> grepl("\\.", "http://www.jhsph.edu/")
[1] TRUE

| Nice work!

  |=========================================================================================================================                                 |  78%
| Which of the following expressions evaluates to TRUE?

1: grepl("\\*", "tragedy + time = humor")
2: grepl("\\+", "tragedy + time = humor")
3: grepl("\\.", "tragedy + time = humor")

Selection: 2

| Excellent job!

  |============================================================================================================================                              |  80%
| There are also metacharacters for matching the beginning and the end of a string which are "^" and "$" respectively.

...

  |===============================================================================================================================                           |  82%
| Let's test these operators out. Enter grepl("^a", c("bab", "aab")) into the R console in order to see if either string begins with "a"

> grepl("^a", c("bab", "aab"))
[1] FALSE  TRUE

| You got it!

  |==================================================================================================================================                        |  84%
| Now use grepl() to see if the two strings from the last question end with the letter "b"

> grepl("^b", c("bab", "aab"))
[1]  TRUE FALSE

| Not quite right, but keep trying. Or, type info() for more options.

| Take a look at the anser to the last question, and remember to use the "$" metacharacter which represeents the end of a string!

> grepl("$b", c("bab", "aab"))
[1] FALSE FALSE

| Almost! Try again. Or, type info() for more options.

| Take a look at the anser to the last question, and remember to use the "$" metacharacter which represeents the end of a string!

> grepl("b$", c("bab", "aab"))
[1] TRUE TRUE

| You are really on a roll!

  |=====================================================================================================================================                     |  86%
| The last metacharacter we’ll discuss is the OR metacharacter ("|"). The OR metacharacter matches either the regex on the left or the regex on the right side of
| this character.

...

  |========================================================================================================================================                  |  88%
| Enter grepl("a|b", c("abc", "bcd", "cde")) into the R console to see which strings contain "a" or "b"

> grepl("a|b", c("abc", "bcd", "cde"))
[1]  TRUE  TRUE FALSE

| You are doing so well!

  |===========================================================================================================================================               |  90%
| The expression grepl("North|South", c("South Dakota", "North Carolina", "West Virginia")) evaluates to which of the following?

1: TRUE TRUE FALSE
2: FALSE TRUE FALSE
3: TRUE FALSE FALSE

Selection: 1

| All that practice is paying off!

  |==============================================================================================================================================            |  92%
| Finally we’ve learned enough to create a regular expression that matches all state names that both begin and end with a vowel! This regular expression must match
| the beginning of a string, then one instance of a capalized vowel, then any characters until one instance of a lowercase vowel followed by the end of the string.

...

  |=================================================================================================================================================         |  94%
| Constructing this regular expression may be a little tough so I'll help you out! Enter start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$" into the R console to store
| this regex.

> start_end_vowel<- "^[AEIOU]{1}. + [aeiou]{1}$"

| Not quite right, but keep trying. Or, type info() for more options.

| Just type - start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"

> start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$
+ 
+ 
+ 

> start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$
+ 

> start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"

| Your dedication is inspiring!

  |====================================================================================================================================================      |  96%
| Now you can see which states match this regular expression. Enter vowel_state_lgl <- grepl(start_end_vowel, state.name) into the R console to store a logical
| vector which indicates which strings in state.name matches the regular expression.

> vowel_state_lgl <- grepl(start_end_vowel, state.name)

| Nice work!

  |=======================================================================================================================================================   |  98%
| Now finally index state.name with the vector you created in the last question in order to see which state names start and end with a vowel!

> 
> vowel_state_lgl
 [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[27] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Just type state.name[vowel_state_lgl]

> state.name[vowel_state_lgl]
[1] "Alabama"  "Alaska"   "Arizona"  "Idaho"    "Indiana"  "Iowa"     "Ohio"     "Oklahoma"

| Great job!

  |==========================================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Generate Code
2: No
3: Yes
